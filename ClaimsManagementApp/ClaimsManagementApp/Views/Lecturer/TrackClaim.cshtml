@model Claim
@using System.IO
@using ClaimsManagementApp.Models
@{
    ViewData["Title"] = "Track Claim";
}

<div class="container">
    <h2>Track Claim #@Model.Id</h2>

    <div class="row">
        <div class="col-md-8">
            <!-- Claim Details -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Claim Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Lecturer Name:</strong> @Model.LecturerName</p>
                            <p><strong>Hours Worked:</strong> @Model.HoursWorked</p>
                            <p><strong>Hourly Rate:</strong> R @Model.HourlyRate</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Total Amount:</strong> R @Model.TotalAmount</p>
                            <p><strong>Submission Date:</strong> @Model.SubmissionDate.ToString("dd/MM/yyyy HH:mm")</p>
                            <p>
                                <strong>Current Status:</strong>
                                <span class="badge @GetStatusBadgeClass(Model.Status)">
                                    @Model.Status
                                </span>
                            </p>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.AdditionalNotes))
                    {
                        <div class="mt-3">
                            <strong>Additional Notes:</strong>
                            <p class="mt-1">@Model.AdditionalNotes</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Supporting Documents -->
            @if (Model.Documents.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Supporting Documents</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            @foreach (var document in Model.Documents)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="fas fa-file @GetFileIconClass(document.FileName) me-2"></i>
                                        @document.FileName
                                        <small class="text-muted ms-2">(@FormatFileSize(document.FileSize))</small>
                                    </div>
                                    <span class="badge bg-secondary rounded-pill">@document.UploadDate.ToString("dd/MM/yyyy")</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-4">
            <!-- Status Progress -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Approval Progress</h5>
                </div>
                <div class="card-body">
                    <div class="progress mb-4" style="height: 8px;">
                        <div class="progress-bar @GetProgressBarClass(Model.Status)"
                             style="width: @GetProgressPercentage(Model.Status)%"></div>
                    </div>

                    <div class="timeline">
                        <div class="timeline-item @(Model.Status >= ClaimStatus.Pending ? "completed" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <h6>Claim Submitted</h6>
                                <small>@Model.SubmissionDate.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                        </div>

                        <div class="timeline-item @(Model.Status >= ClaimStatus.ApprovedByCoordinator ? "completed" :
                                                                               Model.Status == ClaimStatus.RejectedByCoordinator ? "rejected" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <h6>Coordinator Review</h6>
                                @if (Model.Status >= ClaimStatus.ApprovedByCoordinator)
                                {
                                    <small class="text-success">Approved</small>
                                }
                                else if (Model.Status == ClaimStatus.RejectedByCoordinator)
                                {
                                    <small class="text-danger">Rejected</small>
                                }
                                else
                                {
                                    <small class="text-muted">Pending...</small>
                                }
                            </div>
                        </div>

                        <div class="timeline-item @(Model.Status >= ClaimStatus.ApprovedByManager ? "completed" :
                                                                               Model.Status == ClaimStatus.RejectedByManager ? "rejected" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <h6>Manager Approval</h6>
                                @if (Model.Status >= ClaimStatus.ApprovedByManager)
                                {
                                    <small class="text-success">Approved</small>
                                }
                                else if (Model.Status == ClaimStatus.RejectedByManager)
                                {
                                    <small class="text-danger">Rejected</small>
                                }
                                else
                                {
                                    <small class="text-muted">Pending coordinator approval</small>
                                }
                            </div>
                        </div>

                        <div class="timeline-item @(Model.Status == ClaimStatus.ApprovedByManager ||
                                                       Model.Status == ClaimStatus.Settled ? "completed" :
                                                       Model.Status == ClaimStatus.RejectedByManager ? "rejected" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <h6>Manager Approval</h6>
                                @if (Model.Status == ClaimStatus.ApprovedByManager || Model.Status == ClaimStatus.Settled)
                                {
                                    <small class="text-success">Approved</small>
                                }
                                else if (Model.Status == ClaimStatus.RejectedByManager)
                                {
                                    <small class="text-danger">Rejected</small>
                                }
                                else
                                {
                                    <small class="text-muted">Pending coordinator approval</small>
                                }
                            </div>
                        </div>

                        <div class="timeline-item @(Model.Status == ClaimStatus.Settled ? "completed" : "")">
                            <div class="timeline-marker"></div>
                            <div class="timeline-content">
                                <h6>Claim Settled</h6>
                                @if (Model.Status == ClaimStatus.Settled)
                                {
                                    <small class="text-success">Completed</small>
                                }
                                else
                                {
                                    <small class="text-muted">Awaiting final approval</small>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="card mt-4">
                <div class="card-body text-center">
                    <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left"></i> Back to My Claims
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 20px;
        }

        .timeline-marker {
            position: absolute;
            left: -30px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #dee2e6;
            border: 2px solid #fff;
        }

        .timeline-item.completed .timeline-marker {
            background-color: #198754;
        }

        .timeline-item.rejected .timeline-marker {
            background-color: #dc3545;
        }

        .timeline-content h6 {
            margin-bottom: 5px;
            font-weight: 600;
        }

        .timeline-content small {
            color: #6c757d;
        }

        .progress-bar {
            transition: width 0.6s ease;
        }
    </style>
}

@functions {
    string GetStatusBadgeClass(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Pending => "bg-warning",
            ClaimStatus.ApprovedByCoordinator => "bg-info",
            ClaimStatus.ApprovedByManager => "bg-success",
            ClaimStatus.RejectedByCoordinator => "bg-danger",
            ClaimStatus.RejectedByManager => "bg-danger",
            ClaimStatus.Settled => "bg-success",
            _ => "bg-secondary"
        };
    }

    string GetFileIconClass(string fileName)
    {
        if (string.IsNullOrEmpty(fileName))
            return "fa-file";

        var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fa-file-pdf text-danger",
            ".docx" => "fa-file-word text-primary",
            ".xlsx" => "fa-file-excel text-success",
            _ => "fa-file"
        };
    }

    string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    int GetProgressPercentage(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Pending => 25,
            ClaimStatus.ApprovedByCoordinator => 50,
            ClaimStatus.RejectedByCoordinator => 100,
            ClaimStatus.ApprovedByManager => 75,
            ClaimStatus.RejectedByManager => 100,
            ClaimStatus.Settled => 100,
            _ => 0
        };
    }

    string GetProgressBarClass(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.RejectedByCoordinator => "bg-danger",
            ClaimStatus.RejectedByManager => "bg-danger",
            ClaimStatus.Settled => "bg-success",
            _ => "bg-primary"
        };
    }
}